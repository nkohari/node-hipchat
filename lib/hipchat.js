// Generated by CoffeeScript 1.6.3
(function() {
  var HipChatClient, exports, https, querystring;

  https = require('https');

  querystring = require('querystring');

  HipChatClient = (function() {
    HipChatClient.prototype.host = 'api.hipchat.com';

    function HipChatClient(apikey) {
      this.apikey = apikey;
      this.rateLimits = {
        limit: 0,
        remaining: 0,
        reset: 0
      };
    }

    HipChatClient.prototype.listRooms = function(callback) {
      var options;
      options = this._prepareOptions({
        method: 'get',
        path: '/v1/rooms/list'
      });
      return this._sendRequest(options, callback);
    };

    HipChatClient.prototype.showRoom = function(room, callback) {
      var options;
      options = this._prepareOptions({
        method: 'get',
        path: '/v1/rooms/show',
        query: {
          room_id: room
        }
      });
      return this._sendRequest(options, callback);
    };

    HipChatClient.prototype.getHistory = function(params, callback) {
      var options, _ref, _ref1;
      options = this._prepareOptions({
        method: 'get',
        path: '/v1/rooms/history',
        query: {
          room_id: params.room,
          date: (_ref = params.date) != null ? _ref : 'recent',
          timezone: (_ref1 = params.timezone) != null ? _ref1 : 'UTC'
        }
      });
      return this._sendRequest(options, callback);
    };

    HipChatClient.prototype.postMessage = function(params, callback) {
      var options, _ref, _ref1, _ref2;
      options = this._prepareOptions({
        method: 'post',
        path: '/v1/rooms/message',
        data: {
          room_id: params.room,
          from: (_ref = params.from) != null ? _ref : 'node-hipchat',
          message: params.message,
          notify: params.notify ? 1 : 0,
          color: (_ref1 = params.color) != null ? _ref1 : 'yellow',
          message_format: (_ref2 = params.message_format) != null ? _ref2 : 'html'
        }
      });
      return this._sendRequest(options, callback);
    };

    HipChatClient.prototype.getRateLimits = function() {
      return this.rateLimits;
    };

    HipChatClient.prototype._prepareOptions = function(op) {
      op.host = this.host;
      if (op.query == null) {
        op.query = {};
      }
      op.query['auth_token'] = this.apikey;
      op.query = querystring.stringify(op.query);
      op.path += '?' + op.query;
      if (op.method === 'post' && (op.data != null)) {
        op.data = querystring.stringify(op.data);
        if (op.headers == null) {
          op.headers = {};
        }
        op.headers['Content-Type'] = 'application/x-www-form-urlencoded';
        op.headers['Content-Length'] = op.data.length;
      }
      return op;
    };

    HipChatClient.prototype._sendRequest = function(options, callback) {
      var req, _client;
      req = https.request(options);
      _client = this;
      req.on('response', function(res) {
        var buffer;
        buffer = '';
        res.on('data', function(chunk) {
          return buffer += chunk;
        });
        return res.on('end', function() {
          var headers, value;
          headers = res.headers;
          _client.rateLimits = {
            limit: headers['x-ratelimit-limit'],
            remaining: headers['x-ratelimit-remaining'],
            reset: headers['x-ratelimit-reset']
          };
          if (callback != null) {
            if (res.statusCode === 200) {
              value = options.json === false ? buffer : JSON.parse(buffer);
              return callback(value, null);
            } else {
              return callback(null, buffer);
            }
          }
        });
      });
      if (options.data != null) {
        req.write(options.data);
      }
      return req.end();
    };

    return HipChatClient;

  })();

  exports = module.exports = HipChatClient;

}).call(this);
